from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import os
import traceback
import random

def post_to_facebook_groups(post_text, group_links, image_path, status_log, stop_flag, counter):
    if not os.path.exists(image_path):
        status_log.append(f"‚ùå –§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        return

    chrome_options = Options()
    chrome_options.add_argument(r"user-data-dir=C:\SeleniumProfile")
    chrome_options.add_argument("profile-directory=Profile 1")
    # –í–ò–ú–ö–ù–ï–ù–û HEADLESS —â–æ–± –±–∞—á–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä
    # chrome_options.add_argument("--headless")

    driver = webdriver.Chrome(options=chrome_options)
    wait = WebDriverWait(driver, 20)

    for link in group_links:
        if stop_flag["stop"]:
            status_log.append("üõë –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
            break

        try:
            status_log.append(f"\n‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –≥—Ä—É–ø—É: {link}")
            driver.get(link)

            wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            status_log.append("üåê –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")

            # –û—á—ñ–∫—É—î–º–æ —ñ –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ –Ω–∞ –ø–æ–ª–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
            create_post = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//span[contains(text(),'–ù–∞–ø–∏—à—ñ—Ç—å —â–æ—Å—å') or contains(text(),\"What's on your mind\")]"))
            )
            create_post.click()
            status_log.append("üìù –í—ñ–¥–∫—Ä–∏—Ç–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")

            # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É
            post_area = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@role='textbox']")))
            ActionChains(driver).move_to_element(post_area).click().send_keys(post_text).perform()
            status_log.append("üí¨ –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
            photo_buttons = driver.find_elements(By.XPATH, "//div[@role='button']")
            photo_clicked = False
            for button in photo_buttons:
                label = button.get_attribute("aria-label")
                if label and ('—Å–≤—ñ—Ç–ª–∏–Ω–∞' in label.lower() or 'photo' in label.lower()):
                    driver.execute_script("arguments[0].click();", button)
                    status_log.append("üñºÔ∏è –ù–∞—Ç–∏—Å–Ω—É—Ç–æ '–°–≤—ñ—Ç–ª–∏–Ω–∞/–≤—ñ–¥–µ–æ'")
                    photo_clicked = True
                    break

            if not photo_clicked:
                raise Exception("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É '–°–≤—ñ—Ç–ª–∏–Ω–∞/–≤—ñ–¥–µ–æ'")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            file_input = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='file' and @multiple]")))
            file_input.send_keys(os.path.abspath(image_path))
            status_log.append("üì∑ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ")

            # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è
            publish_button = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//div[@aria-label='–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏' or @aria-label='Post']"))
            )
            publish_button.click()
            status_log.append(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ {link}")
            counter["count"] += 1

        except Exception as e:
            status_log.append(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {link}: {str(e)}")
            traceback.print_exc()

        if stop_flag["stop"]:
            status_log.append("üõë –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.")
            break

        delay = random.randint(60, 120)
        status_log.append(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –≥—Ä—É–ø–æ—é...")
        time.sleep(delay)

    driver.quit()
    status_log.append("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é.")



